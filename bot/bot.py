import logging
import os

from aiogram import Bot, Dispatcher, types
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile

from bot.config import TOKEN, PUBLIC_CHAT_ID, THREAD_ID
from utils.get_course import parse_atb_bank
from utils.get_price import create_payload, get_price_and_create_image

logging.basicConfig(level=logging.INFO)

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode='HTML'))
dp = Dispatcher()


async def send_course():
    course = await parse_atb_bank()
    await bot.send_message(chat_id=PUBLIC_CHAT_ID, text=course,
                           message_thread_id=THREAD_ID)


class CalculatorState(StatesGroup):
    age = State()
    price = State()
    dtype = State()
    pwr = State()
    obyem = State()
    pwr_val = State()
    hybrid1 = State()
    hybrid2 = State()
    lico = State()


back_button = InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_start")


def add_back_button(keyboard):
    keyboard.inline_keyboard.append([back_button])
    return keyboard



@dp.message(Command("start"))
async def start(message: types.Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üöò –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", callback_data="calculation_start")],
        [InlineKeyboardButton(text="üí∞ –£–∑–Ω–∞—Ç—å –∫—É—Ä—Å", callback_data="get_course")]
    ])
    await message.answer("<b>üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é </b>", reply_markup=keyboard)


@dp.callback_query(lambda c: c.data == "get_course")
async def start_calculation(callback_query: types.CallbackQuery):
    course = await parse_atb_bank()
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_start")],
    ])
    await callback_query.message.answer(course, keyboard=keyboard)


@dp.callback_query(lambda c: c.data == "calculation_start")
async def start_calculation(callback_query: types.CallbackQuery, state: FSMContext):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ú–µ–Ω–µ–µ 3 –ª–µ—Ç", callback_data="age0")],
        [InlineKeyboardButton(text="–û—Ç 3 –¥–æ 5 –ª–µ—Ç", callback_data="age3")],
        [InlineKeyboardButton(text="–û—Ç 5 –¥–æ 7 –ª–µ—Ç", callback_data="age5")],
        [InlineKeyboardButton(text="–ë–æ–ª–µ–µ 7 –ª–µ—Ç", callback_data="age7")]
    ])
    keyboard = add_back_button(keyboard)
    await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—è:", reply_markup=keyboard)
    await state.set_state(CalculatorState.age)


@dp.callback_query(CalculatorState.age)
async def process_age(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.data == "back_to_start":
        await start(callback_query.message)
        return

    await state.update_data(age=callback_query.data)
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è: (–≤ JPY)")
    await state.set_state(CalculatorState.price)


@dp.message(CalculatorState.price)
async def process_price(message: types.Message, state: FSMContext):
    await state.update_data(price=message.text)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ë–µ–Ω–∑–∏–Ω–æ–≤—ã–π", callback_data="ben")],
        [InlineKeyboardButton(text="–î–∏–∑–µ–ª—å–Ω—ã–π", callback_data="dis")],
        [InlineKeyboardButton(text="–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π", callback_data="electric")]
    ])
    keyboard = add_back_button(keyboard)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è:", reply_markup=keyboard)
    await state.set_state(CalculatorState.dtype)


@dp.callback_query(CalculatorState.dtype)
async def process_dtype(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.data == "back_to_start":
        await start(callback_query.message)
        return

    dtype = callback_query.data
    await state.update_data(dtype=dtype)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ª.—Å.", callback_data="ls")],
        [InlineKeyboardButton(text="–∫–í—Ç", callback_data="kvt")]
    ])
    keyboard = add_back_button(keyboard)
    await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–æ—â–Ω–æ—Å—Ç–∏ (–ª.—Å. –∏–ª–∏ –∫–í—Ç):", reply_markup=keyboard)
    await state.set_state(CalculatorState.pwr)


@dp.callback_query(CalculatorState.pwr)
async def process_pwr(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.data == "back_to_start":
        await start(callback_query.message)
        return

    await state.update_data(pwr=callback_query.data)
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è –≤ –∫—É–±.—Å–º:")
    await state.set_state(CalculatorState.obyem)


@dp.message(CalculatorState.obyem)
async def process_obyem(message: types.Message, state: FSMContext):
    await state.update_data(obyem=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–æ—â–Ω–æ—Å—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—è:")
    await state.set_state(CalculatorState.pwr_val)


@dp.message(CalculatorState.pwr_val)
async def process_pwr_val(message: types.Message, state: FSMContext):
    await state.update_data(pwr_val=message.text)

    data = await state.get_data()
    if data['dtype'] != "electric":
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ù–µ –≥–∏–±—Ä–∏–¥", callback_data="1")],
            [InlineKeyboardButton(text="–≠–ª–µ–∫—Ç—Ä–æ–≥–∏–±—Ä–∏–¥", callback_data="2")],
            [InlineKeyboardButton(text="–≠–ª–µ–∫—Ç—Ä–æ–≥–∏–±—Ä–∏–¥(PHEV)", callback_data="3")]
        ])
        keyboard = add_back_button(keyboard)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≥–∏–±—Ä–∏–¥–∞:", reply_markup=keyboard)
        await state.set_state(CalculatorState.hybrid1)
    else:
        await ask_lico(message, state)


@dp.callback_query(CalculatorState.hybrid1)
async def process_hybrid1(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.data == "back_to_start":
        await start(callback_query.message)
        return

    hybrid1 = callback_query.data
    await state.update_data(hybrid1=hybrid1)

    if hybrid1 != "1":
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–î–í–° > –≠–î", callback_data="a")],
            [InlineKeyboardButton(text="–î–í–° < –≠–î", callback_data="b")]
        ])
        keyboard = add_back_button(keyboard)
        await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –º–æ—â–Ω–æ—Å—Ç–∏ –î–í–° –∏ –≠–î:", reply_markup=keyboard)
        await state.set_state(CalculatorState.hybrid2)
    else:
        await ask_lico(callback_query.message, state)


@dp.callback_query(CalculatorState.hybrid2)
async def process_hybrid2(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.data == "back_to_start":
        await start(callback_query.message)
        return

    await state.update_data(hybrid2=callback_query.data)
    await ask_lico(callback_query.message, state)


async def ask_lico(message: types.Message, state: FSMContext):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–§–∏–∑–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ –¥–ª—è –õ–ò–ß–ù–û–ì–û –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è", callback_data="fiz_personal_use")],
        [InlineKeyboardButton(text="–Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ", callback_data="ur")]
    ])
    keyboard = add_back_button(keyboard)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ª–∏—Ü–∞:", reply_markup=keyboard)
    await state.set_state(CalculatorState.lico)


@dp.callback_query(CalculatorState.lico)
async def process_lico(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.data == "back_to_start":
        await start(callback_query.message)
        return

    await state.update_data(lico=callback_query.data)

    data = await state.get_data()
    payload = create_payload(data)

    merged_image_path = get_price_and_create_image(payload)

    if not os.path.exists(merged_image_path):
        raise FileNotFoundError(f"–§–∞–π–ª {merged_image_path} –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    print(merged_image_path)
    photo = FSInputFile(merged_image_path)

    await bot.send_photo(chat_id=callback_query.from_user.id, photo=photo)
    os.remove(merged_image_path)

    await state.clear()
